{% extends template.base %}

{% block content %}

    <fieldset id="sip-connections">
        <legend>{{ site._('Network settings') }}</legend>
        <table class="network-tb">
            <tr>
                <td>
                    <label><input id="network_sip_all_ip"
                                  name="network_sip_all_ip"
                                  type="checkbox"
                                {{ endpoint_accept ? '' : 'checked="checked"' }} />
                        {{ site._('Listen on all IP addresses') }}</label>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="address-entire-table">
                        <div class="block-table-wrapper">
                            <table>


                                {% if not (endpoint_accept) %}
                                    {% for connect in connects %}
                                        <tr class="address-empty-tr">
                                            <td>
                                                <span>{{ connect }}</span>
                                            </td>
                                        </tr>
                                    {% else %}
                                        <tr class="empty-tr">
                                            <td></td>
                                        </tr>
                                    {% endfor %}
                                {% else %}
                                    {% for item in endpoint_accept %}
                                        <tr>
                                            <td class="left">
                                                <a href="#">{{ item.host~':'~item.port~' ('~item.protocol|lower~')' }}</a>
                                            </td>
                                        </tr>
                                    {% else %}
                                        <tr class="empty-tr">
                                            <td></td>
                                        </tr>
                                    {% endfor %}
                                {% endif %}

                            </table>
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <a id="add-accept-address"
                       class="button {{ endpoint_accept ? '' : 'button-lock' }}"
                       style="margin-right: 20px;">{{ site._('Add') }}</a>
                    <a id="reset-accept-address" class="button"
                       style="margin-right: 20px; display: none;">{{ site._('Reset') }}</a>
                    <a id="update-accept-hosts" href="#" class="button btn_green"
                       style="display: none;">{{ site._('Apply') }}</a>
                </td>
            </tr>
        </table>
    </fieldset>

    <style>
        #sip-connections {
            width: auto;
            min-width: 479px;
        }

        div.address-entire-table, div.restrictions-table {
            height: auto;
        }

    </style>

{% endblock %}

{% block js %}
  {#JS для блока Network settings#}
  <script type="text/javascript">
    function updateCSSOnPage() {
      $(".block-table-wrapper").height($(".address-entire-table").height() - $(".div-header-wrapper").height());
      $('.empty-tr').remove();
    }

    var insideAllIp = {{ endpoint_accept != [] ? 'false' : 'true' }};
    var defaultPort = {{ defaultPort }};
    var defaultProtocol = 'tcp';
    var identifier = 'none';

    var connects = [
      {% for connect in connects %} {
        'connect': '{{ connect }}'
      } {{ not(loop.last) ? ',' : '' }}
      {% endfor %}
    ];

    var endpoint_accept_default = [
      {% for item in endpoint_accept_default %}
      {
        'host': '{{ item.host }}',
        'port': {{ item.port }},
        'protocol': '{{ item.protocol|lower }}'
      } {{ not(loop.last) ? ',' : '' }}
      {% endfor %}
    ];

    var endpoint_accept_current = [
      {% for item in endpoint_accept %}
      {
        'host': '{{ item.host }}',
        'port': {{ item.port }},
        'protocol': '{{ item.protocol|lower }}'
      } {{ not(loop.last) ? ',' : '' }}
      {% endfor %}
    ];

    var endpoint_accept = endpoint_accept_current.slice(0);

    var g_action_add = true;

    $(document).ready(function () {

      $('#update-accept-hosts').click(function () {
        var sips = $('#network_sip_all_ip').is(':checked') ? [] : endpoint_accept;

        $.ajax({
          url: "{{ site.getInsideUrl('network', 'update-sip-hosts') }}",
          type: 'POST',
          data: {'sips': sips, 'endpoint': '{{ protocol_name }}'},
          success: function () {
            window.location.reload();
          },
          error: function () {
            $(document).trigger('display-header-error', t._error);
          }
        });
        return !1;
      });

      $('#network_sip_all_ip').bind('click', function () {
        if (insideAllIp && $(this).is(':checked')) {
          hideAcceptBtns();
        } else if (!insideAllIp && !$(this).is(':checked') && isEqualObjectArrays(endpoint_accept_current, endpoint_accept)) {
          hideAcceptBtns();
        } else {
          showAcceptBtns();
        }

        if ($(this).is(':checked')) {
          renderListenAll('sip-connections', connects);
          $('#add-accept-address').addClass('button-lock');
        } else {
          if (!endpoint_accept.length)
            endpoint_accept = endpoint_accept_default.slice(0);

          renderAddressTableLines('sip-connections', endpoint_accept);

          $('#add-accept-address').removeClass('button-lock');
        }
      });

      $('#add-accept-address').click(function () {
        if (!$(this).hasClass('button-lock')) {
          g_action_add = true;
          $("#accept-port").val(defaultPort);
          $("#accept-protocol").val(defaultProtocol);
          var buttons = $("#dialog-form").dialog("option", "buttons");
          $("#dialog-form").dialog("option", "open", function () {
            addButtonsStyleAdd();
          });
          $("#dialog-form").dialog("option", "title", "{{ site._('Add address') }}");
          $('#dialog-form').dialog('open');
        }
        return !1;
      });

      var host = $("#accept-host"),
              port = $("#accept-port"),
              protocol = $("#accept-protocol"),
              allFields = $([]).add(host).add(port).add(protocol);


      function checkExistence(arr, obj) {
        for (var k in arr) {
          if (Number(arr[k].port) == Number(obj.port) && arr[k].host == obj.host && arr[k].protocol == obj.protocol) {
            updateTips("{{ site._('Address already exists') }}");
            return false;
          }
        }
        return true
      }

      $("#dialog-form").dialog({
        autoOpen: false,
        height: 375,
        width: 350,
        modal: true,
        minHeight: 375,
        minWidth: 350,
        draggable: true,
        resizable: false,
        open: function () {
          addButtonsStyleAdd();
        },
        buttons: {
          "{{ site._('Delete') }}": function () {
            return !1;
          },
          "{{ site._('Cancel') }}": function () {
            $(this).dialog("close");
          },
          "{{ site._('Save') }}": function () {
            var bValid = true;
            host.val($.trim(host.val()));
            allFields.removeClass("ui-state-error");

            bValid = bValid && checkLength(host, "{{ site._('Host') }}", 1, 255);
            bValid = bValid && checkLength(port, "{{ site._('Port') }}", 1, 5);
            bValid = bValid && checkRegexp(host, {{ host_regex }}, "<b>{{ site._('Host') }}</b>: {{ site._('Hostname or IP invalid') }}", punycode.toASCII);
            bValid = bValid && checkRegexp(port, /^\d+$/, "<b>{{ site._('Port') }}</b>: {{ site._('Only numbers are allowed') }}");
            bValid = bValid && checkInt(port, "{{ site._('Port') }}", 1, {{ constant('\\Core\\FormApi2\\SpecificFields\\PortField::MAX') }});

            if (g_action_add)
              bValid = bValid && checkExistence(endpoint_accept, {
                'host': host.val(),
                'port': port.val(),
                'protocol': protocol.val()
              });

            if (bValid) {

              showAcceptBtns();
              console.log(identifier);
              add('sip-connections', endpoint_accept, host.val(), port.val(), protocol.val(), identifier);

              $("#dialog-form").dialog("close");
            }
          }
        },
        close: function () {
          $(".validateTips").text("");
          allFields.val("").removeClass("ui-state-error");
          identifier = 'none';
        }
      });

      $('#sip-connections .address-entire-table a').click(editAdress);
      $('#reset-accept-address').click(function () {
        resetAccept();
        return !1;
      });
    });

    function add(id, arr, host, port, protocol, key) {
      var key = (key != 'none') ? key : false;

      if (key)
        arr[key] = {'host': host, 'port': Number(port), 'protocol': protocol};
      else
        arr.push({'host': host, 'port': Number(port), 'protocol': protocol});

      identifier = 'none';

      renderAddressTableLines(id, arr);
    }

    function editAdress() {
      var host = $(this).text();
      var data = host.match(/(.+):+(\d*)\s\((.*)\)/);

      if (data)
        editAccept(data[1], data[2], data[3]);

      return !1;
    }

    function deleteAccept(host, port, protocol) {
      showAcceptBtns();
      if (endpoint_accept.length > 0) {
        for (var k in endpoint_accept) {
          if (Number(endpoint_accept[k].port) == Number(port) &&
                  endpoint_accept[k].host == host &&
                  endpoint_accept[k].protocol == protocol) {
            endpoint_accept.splice(k, 1);

            $('#add-accept-address').removeClass('button-lock');

            renderAddressTableLines('sip-connections', endpoint_accept);
          }
        }
      }
    }

    function resetAccept() {
      hideAcceptBtns();
      endpoint_accept = endpoint_accept_current.slice(0);

      if (insideAllIp) {
        $('#network_sip_all_ip').prop("checked", true);
        renderListenAll('sip-connections', connects);
        $('#network_sip_all_ip').addClass('button-lock');
      } else {
        $('#network_sip_all_ip').removeAttr('checked');
        renderAddressTableLines('sip-connections', endpoint_accept_current);
        $('#add-accept-address').removeClass('button-lock');
      }

      if (endpoint_accept_current.length > 0) {
        return;
      }
      $('#network_sip_all_ip').prop("checked", true);
      $('#add-accept-address').addClass('button-lock');
    }

    function renderAddressTableLines(id, arr) {
      var html = '';
      if (arr.length > 0) {
        for (var k in arr) {
          html += '<tr><td class="left">' + '<a href="#">' +
                  arr[k].host + ':' + arr[k].port + ' (' + arr[k].protocol + ')</a></td></tr>';
        }

        $('#' + id + ' .address-entire-table table tbody').html(html);
      } else {
        $('#' + id + ' .address-entire-table table tbody').html('<tr class="empty-tr"><td></td></tr>');
      }
//            prepare_table();

      $('#sip-connections .address-entire-table a').click(editAdress);
    }

    function renderListenAll(id, arr) {
      var html = '';
      if (arr.length > 0) {
        for (var k in arr) {
          html += '<tr><td class="left">' + arr[k].connect + '</td></tr>';
        }

        $('#' + id + ' .address-entire-table table tbody').html(html);
      } else {
        $('#' + id + ' .address-entire-table table tbody').html('<tr class="empty-tr"><td></td></tr>');
      }
//            prepare_table();
    }

    function editAccept(host, port, protocol) {
      g_action_add = false;
      if (endpoint_accept.length > 0) {
        for (var k in endpoint_accept) {
          if (Number(endpoint_accept[k].port) == Number(port) &&
                  endpoint_accept[k].host == host &&
                  endpoint_accept[k].protocol == protocol) {
            identifier = k;
            $("#accept-host").val(host);
            $("#accept-port").val(port);
            $("#accept-protocol").val(protocol);
            var buttons = $("#dialog-form").dialog("option", "buttons");
            buttons["{{ site._('Delete') }}"] = function () {
              deleteAccept(host, port, protocol);
              $(this).dialog("close");
              return !1;
            };
            $("#dialog-form").dialog("option", "buttons", buttons);
            $("#dialog-form").dialog("option", "open", function () {
              editButtonsStyleAdd();
            });
            $("#dialog-form").dialog("option", "title", "{{ site._('Edit address') }}");
            $('#dialog-form').dialog('open');
          }
        }
      }
    }

    function showAcceptBtns() {
      $('#reset-accept-address').show();
      $('#update-accept-hosts').show();
    }

    function hideAcceptBtns() {
      $('#reset-accept-address').hide();
      $('#update-accept-hosts').hide();
    }

    function addButtonsStyleAdd() {
      $('.ui-dialog-buttonset').css('float', 'none');
      $('.ui-dialog-buttonset>.ui-button:first').hide();
      $('.ui-dialog-buttonset>.ui-button:not(:first)').css('float', 'right');
    }

    function editButtonsStyleAdd() {
      $('.ui-dialog-buttonset').css('float', 'none');
      $('.ui-dialog-buttonset>.ui-button:first').css('float', 'left').show();
      $('.ui-dialog-buttonset>.ui-button:not(:first)').css('float', 'right');
    }


    var ENUM_LAST_AUTHORIZATION_RESULT_DEFAULT = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_DEFAULT')|e('html')|e('js') }}";
    var ENUM_LAST_AUTHORIZATION_RESULT_UNKNOWN = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_UNKNOWN')|e('html')|e('js') }}";
    var ENUM_LAST_AUTHORIZATION_RESULT_VALID = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_VALID')|e('html')|e('js') }}";
    var ENUM_LAST_AUTHORIZATION_RESULT_FORBIDDEN = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_FORBIDDEN')|e('html')|e('js') }}";
    var ENUM_LAST_AUTHORIZATION_RESULT_CAN_NOT_CHECK = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_CAN_NOT_CHECK')|e('html')|e('js') }}";
    var ENUM_LAST_AUTHORIZATION_RESULT_SERVER_UNREACHABLE = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_SERVER_UNREACHABLE')|e('html')|e('js') }}";
    var ENUM_LAST_AUTHORIZATION_RESULT_PENDING = "{{ constant(namespace ~ '::ENUM_LAST_AUTHORIZATION_RESULT_PENDING')|e('html')|e('js') }}";

  </script>
{% endblock %}