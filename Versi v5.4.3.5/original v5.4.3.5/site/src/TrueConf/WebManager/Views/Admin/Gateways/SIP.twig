{% extends 'controllers/admin/network/networkSettings.twig' %}

{% block content %}

    {#Блок Network settings#}
    {{ parent('content') }}

    <fieldset id="fieldset-preset-list" class="m-top-10">
        <legend>{{ site._("Rules for %protocol connections")|replace({'%protocol': protocol_name})|e('html') }}</legend>
        <table id="peerList" class="table-body clean-table">
            <thead>
            <tr>
                <td><b>{{ site._("Name")|e('html') }}</b></td>
                <td><b>{{ site._("Role")|e('html') }}</b></td>
                <td><b>{{ site._("Host")|e('html') }}</b></td>
                <td style="float: right"><b>{{ site._("Status")|e('html') }}</b></td>
            </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
        <a id="addConfig" onclick="openChangePresetDialog()"
           class="button">{{ site._("Add a configuration")|e('html') }}</a>
    </fieldset>

    <fieldset id="global-sip-settings" class="m-top-10">
        <legend>{{ site._('Global %protocol settings')|replace({'%protocol': protocol_name})|e('html') }}</legend>
        <form id="globalForm">
            <div class="global-settings-block">
                <label>{{ site.pgettext('A text hint in the section where the administrator can configure call routing', 'Action on incoming call to the %server_name IP address')
                        |replace({"%server_name": settings.config["server_name"]})|e('html') }}<br>
                    <div>
                        <input type="radio" value="2"
                               id="default_call_destination_reject"
                               name="default-call-destination"
                               class="default_call_destination-radio" />
                        <label for="default_call_destination_reject">{{ site.pgettext('The title of a radio button in the section where the administrator can configure call routing', 'Reject call')|e('html') }}</label>
                    </div>
                    <div>
                        <input type="radio" value="1"
                               id="default_call_destination_allow_enter_cid"
                               name="default-call-destination"
                               class="default_call_destination-radio" />
                        <label for="default_call_destination_allow_enter_cid">{{ site.pgettext('The title of a radio button. An user will be able to join the conference by its ID.', 'Forward to menu for entering a conference ID')|e('html') }}</label>
                    </div>
                    <div>
                        <input type="radio" value="0"
                               id="default_call_destination_str"
                               name="default-call-destination"
                               class="default_call_destination-radio" />
                        <label for="default_call_destination_str">{{ site.pgettext('A text hint for an input field. The administrator can specify a user ID or conference ID.', 'Forward to a user or conference by the specified ID')|e('html') }}</label>
                    </div>
                    <input id="default_call_destination-input"
                           type="text"
                           name="default_call_destination_sip"
                           value=""
                           minlength="{{ constant(global_namespace ~ '::LENGTH_DEFAULT_CALL_DESTINATION_SIP_MIN')|e('html') }}"
                           maxlength="{{ constant(global_namespace ~ '::LENGTH_DEFAULT_CALL_DESTINATION_SIP_MAX')|e('html') }}"
                           class="text sip-value-param with-errors global-settings-block_input-text"
                           autocomplete="off">
                </label>
            </div>
            <div class="global-settings-block">
                <label>{{ site._('SIP proxy server')|e('html') }}<br>
                    <input id="outbound_proxy-input"
                           type="text"
                           name="outbound_proxy_sip"
                           value=""
                           class="text sip-value-param with-errors global-settings-block_input-text"
                           autocomplete="off">
                </label>
                <p class="global-settings-block__description">
                    {{ site._('An outbound proxy that will receive SIP requests from %server_name.')
                    |replace({"%server_name": settings.config["server_name"]})|e('html') }}
                </p>
            </div>
            <div class="global-settings-block">
                <label>{{ site._('External NAT IP address')|e('html') }}<br>
                    <input id="external_address_input"
                           type="text"
                           name="external_address_input"
                           value=""
                           class="text sip-value-param with-errors global-settings-block_input-text"
                           autocomplete="off">
                </label>
                <p class="global-settings-block__description">
                    {{ site._('This address will be used in SDP to send and receive audio and video when calling external users.')|e('html') }}
                </p>
            </div>
            <div class="global-settings-block">
                <label>{{ site._('Outgoing SIP domain for callback to %vendor_name')
                        |replace({"%vendor_name": settings.config["vendor_name"]})|e('html') }}<br>
                    <div>
                        <input class="sip-from-host-radio" type="radio" id="sip_from_host_disable" name="sip-from-host" value="disable" checked />
                        <label for="sip_from_host_disable">{{ site._('Do not specify')|e('html') }}</label>
                    </div>
                    <div>
                        <input class="sip-from-host-radio" type="radio" id="sip_from_host_server_name" name="sip-from-host" value="serverName" />
                        <label for="sip_from_host_server_name">{{ site._('Use server public name (%server_name)')
                            |replace({"%server_name": short_server_name})|e('html') }}</label>
                    </div>
                    <div>
                        <input class="sip-from-host-radio" type="radio" id="sip_from_host_custom" name="sip-from-host" value="custom" />
                        <label for="sip_from_host_custom">{{ site._('Use other domain')|e('html') }}</label>
                    </div>
                    <input id="sip_from_host-input" type="text"
                           name="domain" value=""
                           minlength="{{ constant(global_namespace ~ '::LENGTH_SIP_FROM_HOST_MIN')|e('html') }}"
                           maxlength="{{ constant(global_namespace ~ '::LENGTH_SIP_FROM_HOST_MAX')|e('html') }}"
                           class="text sip-value-param global-settings-block_input-text"
                           autocomplete="off">
                </label>
            </div>
        </form>
        <div class="global-settings-block-checkboxes" id="reducingTheSizeBlock">
            <p><b>{{ site._('Reduce SIP messages size')|e('html') }}</b></p>
            <label><input id="NoRtpmap-checkbox" name="NoRtpmapForAudioStaticPayload" value="1"
                          class="checkbox global-settings sip-checkbox-param"
                          type="checkbox">&nbsp;<span>{{ site._('Remove optional SDP attributes for static RTP payload types')|e('html') }}</span></label><br>
            <label><input id="CompactHeader-checkbox" name="CompactHeader" value="1"
                          class="checkbox global-settings sip-checkbox-param"
                          type="checkbox">&nbsp;<span>{{ site._('Use compact form of SIP headers')|e('html') }}</span></label>
        </div>
            <div class="global-settings-block-checkboxes" id="additionalOptionsBlock">
                <p><b>{{ site._('Advanced setting')|e('html') }}</b></p>
                <label><input id="enable-bfcp-checkbox" name="bfcp" value="1"
                              class="checkbox global-settings sip-checkbox-param"
                              type="checkbox">&nbsp;<span>{{ site._('Enable content sharing via BFCP')|e('html') }}</span></label><br>
                <label><input id="enable-ice-checkbox" name="ice" value="1"
                              class="checkbox global-settings sip-checkbox-param"
                              type="checkbox">&nbsp;<span>{{ site._('Enable ICE support')|e('html') }}</span></label><br>
                <label><input id="enable-srtp-checkbox" name="srtp" value="1"
                              class="checkbox global-settings sip-checkbox-param"
                              type="checkbox">&nbsp;<span>{{ site._('Enable SRTP support')|e('html') }}</span></label>
                <label class="for-sfb"><input id="enable-h224-checkbox" name="h224" value="1"
                                              class="checkbox global-settings sip-checkbox-param"
                                              type="checkbox">&nbsp;<span>{{ site._('Enable far end camera control via Q.922/H.224/H.281')|e('html') }}</span></label>
                <label><input id="enable-timers-support-checkbox" name="timersSupport" value="1"
                              class="checkbox global-settings sip-checkbox-param"
                              type="checkbox">&nbsp;<span>{{ site._('Enable timers support (%rfc)')|replace({'%rfc':'RFC4028'})|e('html') }}</span></label><br>
                <form id="additionalOptionsForm">
                    <label for="max_session_refresh_interval">{{ site._('Max session refresh interval (seconds)')|e('html') }}</label>
                    <div id="refresh-interval-error-wrapper">
                      <input id="max_session_refresh_interval" name="max_session_refresh_interval"
                             class="sip-value-param number-input with-errors" type="number" min="0" max="86400"><br>
                    </div>
                </form>
            </div>
        <div class="global-settings-block" id="availableCodecs">
            <p><b>{{ site._('Available codecs')|e('html') }}</b></p>
            <div>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H265"
                                                     id="H265">
                    <div>H.265</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H264HP"
                                                     id="H264HP">
                    <div>H.264 High Profile</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H264MP"
                                                     id="H264MP">
                    <div>H.264 Main Profile</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H264"
                                                     id="H264">
                    <div>H.264 Baseline Profile</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="XH264UC"
                                                     id="XH264UC">
                    <div>X-H264UC</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="H263plus2" id="H263plus2">
                    <div>H.263++</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H263plus"
                                                     id="H263plus">
                    <div>H.263+</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H263"
                                                     id="H263">
                    <div>H.263</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="H261"
                                                     id="H261">
                    <div>H.261</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="VP8"
                                                     id="VP8">
                    <div>VP8</div>
                </label>
            </div>
            <div>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="SIREN14_32" id="SIREN14_32">
                    <div>G.722.1C 32 kbit/s</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="SIREN14_48" id="SIREN14_48">
                    <div>G.722.1C 48 kbit/s</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="SIREN14_24" id="SIREN14_24">
                    <div>G.722.1C 24 kbit/s</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="G722132"
                                                     id="G722132">
                    <div>G.722.1 32 kbit/s</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="G722124"
                                                     id="G722124">
                    <div>G.722.1 24 kbit/s</div>
                </label>
            </div>
            <div>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="G722_64k"
                                                     id="G722_64k">
                    <div>G.722</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="G723"
                                                     id="G723">
                    <div>G.723</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="G728"
                                                     id="G728">
                    <div>G.728</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="G729a"
                                                     id="G729a">
                    <div>G.729A</div>
                </label>
            </div>
            <div>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="G711Ulaw64k" id="G711Ulaw64k">
                    <div>G.711 ulaw</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="G711Alaw64k" id="G711Alaw64k">
                    <div>G.711 alaw</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox" name="OPUS"
                                                     id="OPUS">
                    <div>OPUS</div>
                </label>
                <label class="enabled-codecs"><input class="enabled-codecs-checkbox" type="checkbox"
                                                     name="SPEEX_16kHz" id="SPEEX_16kHz">
                    <div>Speex</div>
                </label>
            </div>
        </div>
        <button id="sip-domain-btn" href="#" class="button button-lock" style="clear: both"
                disabled>{{ site._('Apply')|e('html') }}</button>
    </fieldset>

    {#Модальные окна#}
    <div>
        <div id="peerModal" style="display: none; ">
            <div id="peerModalBody">
                <form id="peerModalForm">
                    <table class="clean-table">
                        <tbody>
                        <tr>
                            <td class="with-errors" colspan="2">
                                <label>{{ site._('Name')|e('html') }}*<br>
                                    <input class="peer-value-param required-peer-field"
                                           id="name" name="name" type="text"
                                           maxlength="{{ constant(namespace ~ '::LENGTH_NAME_MAX')|e('html') }}"
                                           value="" required aria-invalid="false"></label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors peer-param">
                                <label>{{ site._('Host')|e('html') }}*<br>
                                    <input class="peer-value-param required-peer-field"
                                           id="hostname" name="hostname" type="text"
                                           maxlength="{{ constant(namespace ~ '::LENGTH_HOSTNAME_MAX')|e('html') }}"
                                           value="" required></label>
                            </td>
                            <td class="with-errors peer-param">
                                <label>{{ site._('Port')|e('html') }}*<br>
                                    <input class="peer-value-param required-peer-field"
                                           id="port" name="port"
                                           min="{{ constant(namespace ~ '::MIN_VALUE_PORT')|e('html') }}"
                                           max="{{ constant(namespace ~ '::MAX_VALUE_PORT')|e('html') }}"
                                           type="number" style="border: 1px solid grey;" value="" required
                                           aria-invalid="true"></label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors peer-param" colspan="2">
                                <label>{{ site._('SIP proxy server')|e('html') }}<br>
                                    <input class="peer-value-param"
                                           id="outboundProxy" name="outboundProxy"
                                           type="text" style="border: 1px solid grey;"
                                           value="">
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors peer-param" colspan="2">
                                <label>{{ site._('External NAT IP address')|e('html') }}<br>
                                    <input class="peer-value-param"
                                           id="externalAddress" name="externalAddress"
                                           autocomplete="nope"
                                           type="text" style="border: 1px solid grey;"
                                           value="">
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors peer-param" colspan="2" style="height: 130px;">
                                <label>{{ site._('Outgoing SIP domain for callback to %vendor_name')
                                    |replace({"%vendor_name": settings.config["vendor_name"]})|e('html') }}<br>
                                    <div>
                                        <input class="sipRemoveFromDomain not-skype-prop" type="radio" id="sipFromHostDisable" name="sipFromHostRadio" value="disable" checked />
                                        <label for="sipFromHostDisable">{{ site._('Do not specify')|e('html') }}</label>
                                    </div>
                                    <div>
                                        <input class="sipRemoveFromDomain not-skype-prop" type="radio" id="sipFromHostServerName" name="sipFromHostRadio" value="serverName" />
                                        <label for="sipFromHostServerName">{{ site._('Use server public name (%server_name)')
                                            |replace({"%server_name": short_server_name})|e('html') }}</label>
                                    </div>
                                    <div>
                                        <input class="sipRemoveFromDomain not-skype-prop" type="radio" id="sipFromHostCustom" name="sipFromHostRadio" value="custom" />
                                        <label for="sipFromHostCustom">{{ site._('Use other domain')|e('html') }}</label>
                                    </div>
                                    <input id="sipFromHost" type="text"
                                           name="sipFromHost" value=""
                                           minlength="{{ constant(global_namespace ~ '::LENGTH_SIP_FROM_HOST_MIN')|e('html') }}"
                                           maxlength="{{ constant(global_namespace ~ '::LENGTH_SIP_FROM_HOST_MAX')|e('html') }}"
                                           class="peer-value-param not-skype-prop"
                                           autocomplete="off">
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors peer-param">
                                <label>{{ site._('Login')|e('html') }}<br>
                                    <input class="peer-value-param" id="login"
                                           name="login" type="text"
                                           maxlength="{{ constant(namespace ~ '::LENGTH_LOGIN_MAX')|e('html') }}"
                                           value="">
                                </label>
                            </td>
                            <td class="with-errors peer-param"><label>{{ site._('Password')|e('html') }}<br>
                                    <input class="peer-value-param" id="password"
                                           name="password" type="password"
                                           maxlength="{{ constant(namespace ~ '::LENGTH_PASSWORD_MAX')|e('html') }}"
                                           value=""></label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors peer-param" colspan="2">
                                <label>{{ site._('Authorization name')|e('html') }}<br>
                                    <input class="peer-value-param"
                                           id="authorizationName" name="authorizationName" type="text"
                                           maxlength="{{ constant(namespace ~ '::LENGTH_AUTHORIZATION_NAME_MAX')|e('html') }}"
                                           value=""></label>
                            </td>
                        </tr>
                        <tr>
                            <td class="with-errors not-default-prop peer-param" style="display: table-cell;width: 100%"
                                colspan="2">
                                <label>{{ site._('International call prefix')|e('html') }}<br>
                                    <input title="{{ site._("When the number is dialed in the E.164 format, the \"plus\" sign will be replaced with the indicated prefix for entering the international line. For example, in calls from Russia, with the exit code being 8-10, the number +7(926)123-45-67 will be replaced with 8-10-7(926)123-45-67. If you wish to leave the prefix in the E.164 format, enter \"+\" in this field.")|e('html') }}"
                                           class="peer-value-param" id="telephonePrefixReplace"
                                           name="telephonePrefixReplace" type="text"
                                           maxlength="{{ constant(namespace ~ '::LENGTH_TELEPHONE_PREFIX_REPLACE_MAX')|e('html') }}"></label>
                            </td>
                        </tr>
                        <tr>
                            <td id="sipPeerRegistration" class="peer-param"><label>
                                    {{ site._('Registration')|e('html') }}:
                                    <select class="peer-value-param not-skype-prop" id="registerStrategy"
                                            name="registerStrategy" required>
                                        <option value="0">{{ site._('off')|e('html') }}</option>
                                        <option value="1">{{ site._('permanent')|e('html') }}</option>
                                        <option value="2">{{ site._('before call')|e('html') }}</option>
                                    </select></label></td>
                            <td id="sipPeerTransport" class="peer-param" style="display: table-cell;">
                                <label>
                                    {{ site._('Transport')|e('html') }}:
                                    <select class="peer-value-param not-skype-prop" id="protocol" name="protocol">
                                        <option value="">{{ site._('Auto')|e('html') }}</option>
                                        <option value="TCP">TCP</option>
                                        <option value="UDP">UDP</option>
                                        <option value="TLS">TLS</option>
                                    </select>
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding-top: 0; padding-bottom: 0" colspan="2">
                                <p class="peer-codecs-section"><b>{{ site._('Reduce SIP messages size')|e('html') }}</b></p>
                            </td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2" style="display: table-cell;">
                                <label>
                                    <input class="peer-checkbox-param" id="noRtpmapForAudioStaticPayload"
                                           name="noRtpmapForAudioStaticPayload"
                                           type="checkbox"> {{ site._('Remove optional SDP attributes for static RTP payload types')|e('html') }}
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2" style="display: table-cell;">
                                <label>
                                    <input class="peer-checkbox-param" id="compactHeader"
                                            name="compactHeader" value="1" type="checkbox"> {{ site._('Use compact form of SIP headers')|e('html') }}
                                </label>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding-top: 0; padding-bottom: 0" colspan="2">
                                <p class="peer-codecs-section"><b>{{ site._('Advanced setting')|e('html') }}</b></p>
                            </td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2" style="display: table-cell;"><label id="iceEnabled-label"
                                                                                                   class="cb-label">
                                    <input class="peer-checkbox-param not-skype-prop" id="iceEnabled" name="iceEnabled"
                                           type="checkbox"> {{ site._('Enable ICE support')|e('html') }}</label></td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2" style="display: table-cell;"><label
                                        id="srtpEnabled-label"
                                        class="cb-label"> <input
                                            class="peer-checkbox-param not-skype-prop" id="srtpEnabled"
                                            name="srtpEnabled"
                                            type="checkbox"> {{ site._('Enable SRTP support')|e('html') }}</label></td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2"><label id="bfcpEnabled-label" class="cb-label"> <input
                                            class="not-skype-prop peer-checkbox-param"
                                            id="bfcpEnabled" name="bfcpEnabled"
                                            type="checkbox"> {{ site._('Enable content sharing via BFCP')|e('html') }}
                                </label></td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2"><label id="h224Enabled-label" class="cb-label for-sfb">
                                    <input
                                            class="peer-checkbox-param not-skype-prop"
                                            id="h224Enabled" name="h224Enabled"
                                            type="checkbox"> {{ site._('Enable far end camera control via Q.922/H.224/H.281')|e('html') }}
                                </label></td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="2"><label id="timersSupport-label" class="cb-label for-sfb">
                                    <input
                                            class="peer-checkbox-param"
                                            id="sessionTimersEnabled" name="sessionTimersEnabled"
                                            type="checkbox"> {{ site._('Enable timers support (%rfc)')|replace({'%rfc':'RFC4028'})|e('html') }}
                                </label></td>
                        </tr>
                        <tr>
                            <td class="peer-param" colspan="1">
                                <label>{{ site._('Max session refresh interval (seconds)')|e('html') }}</label>
                                <input class="peer-value-param" id="maxSessionRefreshInterval" name="maxSessionRefreshInterval"
                                      type="number" min="0">
                          </td>
                        </tr>
                        <tr>
                            <td colspan="2" id="peerEnabledCodecs">
                                <div class="enabled-codecs-block" id="peerAvailableCodecs">
                                    <p class="peer-codecs-section"><b>{{ site._('Available codecs')|e('html') }}</b></p>
                                    <div>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H265"
                                                                                  id="peerH265">
                                            <div>H.265</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H264HP"
                                                                                  id="peerH264HP">
                                            <div>H.264 High Profile</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H264MP"
                                                                                  id="peerH264MP">
                                            <div>H.264 Main Profile</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H264"
                                                                                  id="peerH264">
                                            <div>H.264 Baseline Profile</div>
                                        </label>
                                        <label class="peer-enabled-codecs "><input
                                                    class="peer-enabled-codecs-checkbox not-skype-prop" type="checkbox"
                                                    name="XH264UC"
                                                    id="peerXH264UC">
                                            <div>X-H264UC</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="H263plus2" id="peerH263plus2">
                                            <div>H.263++</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H263plus"
                                                                                  id="peerH263plus">
                                            <div>H.263+</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H263"
                                                                                  id="peerH263">
                                            <div>H.263</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="H261"
                                                                                  id="peerH261">
                                            <div>H.261</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="VP8"
                                                                                  id="peerVP8">
                                            <div>VP8</div>
                                        </label>
                                    </div>
                                    <div>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="SIREN14_32" id="peerSIREN14_32">
                                            <div>G.722.1C 32 kbit/s</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="SIREN14_48" id="peerSIREN14_48">
                                            <div>G.722.1C 48 kbit/s</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="SIREN14_24" id="peerSIREN14_24">
                                            <div>G.722.1C 24 kbit/s</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="G722132"
                                                                                  id="peerG722132">
                                            <div>G.722.1 32 kbit/s</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="G722124"
                                                                                  id="peerG722124">
                                            <div>G.722.1 24 kbit/s</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="G722_64k"
                                                                                  id="peerG722_64k">
                                            <div>G.722</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="G723"
                                                                                  id="peerG723">
                                            <div>G.723</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="G728"
                                                                                  id="peerG728">
                                            <div>G.728</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="G729a"
                                                                                  id="peerG729a">
                                            <div>G.729A</div>
                                        </label>
                                    </div>
                                    <div>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="G711Ulaw64k"
                                                                                  id="peerG711Ulaw64k">
                                            <div>G.711 ulaw</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="G711Alaw64k"
                                                                                  id="peerG711Alaw64k">
                                            <div>G.711 alaw</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox" name="OPUS"
                                                                                  id="peerOPUS">
                                            <div>OPUS</div>
                                        </label>
                                        <label class="peer-enabled-codecs"><input class="peer-enabled-codecs-checkbox"
                                                                                  type="checkbox"
                                                                                  name="SPEEX_16kHz"
                                                                                  id="peerSPEEX_16kHz">
                                            <div>Speex</div>
                                        </label>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" id="roleSpan">
                                <label><b>{{ site._('Role')|e('html') }} </b></label>
                            </td>
                        </tr>
                        <tr>
                            <td class="peer-param">
                                <label><input id="defaultSipProxy" name="defaultSipProxy" type="checkbox"
                                              class="connection-role"> {{ default_sip_proxy_role|e('html') }}</label>
                            </td>
                            <td class="peer-param">
                                <label><input id="defaultVoIPServer" name="defaultVoIPServer" type="checkbox"
                                              class="connection-role"> {{ default_voip_server_role|e('html') }}</label>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>

        <div id="questionDialog" style="display: none" title="{{ site._("Question") |e('html') }}">
            <span>{{ site._("%protocol connection configuration <b>will be removed</b>. Are you sure?")|replace({'%protocol': protocol_name}) }}</span>
            <div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix" style="text-align: center">
                <button id="deleteBtnInModal" onclick="deletePeer()" type="button"
                        class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" role="button"
                        aria-disabled="false">
                    <span class="ui-button-text">{{ site._("Delete")|e('html') }}</span>
                </button>
                <button id="cancelBtnInModal" onclick="dialogQuestionWindow.dialog('close');" type="button"
                        class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" role="button"
                        aria-disabled="false">
                    <span class="ui-button-text">{{ site._("Cancel")|e('html') }}</span>
                </button>
            </div>
        </div>

        <div id="dialog-form" style="display: none">
            <p class="validateTips"></p>
            <form>
                <fieldset>
                    <input type="hidden" id="accept-identifier" name="identifier" value="none"/>
                    <label for="host">
                        {{ site._('Host')|e('html') }}
                        <input type="text" name="host" id="accept-host" class="text ui-widget-content ui-corner-all"
                               maxlength="255"/>
                    </label>

                    <label for="port">
                        {{ site._('Port')|e('html') }}
                        <input type="text" name="port" id="accept-port" value=""
                               class="text ui-widget-content ui-corner-all"
                               maxlength="5" onkeyup="this.value = this.value.replace(/\D/ig, '');"/>
                    </label>

                    <label for="protocol">
                        {{ site._('Protocol')|e('html') }}
                        <select name="protocol" id="accept-protocol" class="text ui-widget-content ui-corner-all"
                                style="width: 99%; height: 32px;">
                            <option value="tcp">TCP</option>
                            <option value="udp">UDP</option>
                            <option value="tls">TLS</option>
                        </select>
                    </label>
                </fieldset>
            </form>
        </div>

        <div id="changePresetDialog" class="ui-dialog-content ui-widget-content" style="display: none"
             title="{{ site._("Select SIP configuration type")|e('html') }}">
            <div class="preset-block"><h2>{{ site._("Manual configuration")|e('html') }}</h2>
                <table class="clean-table">
                    <tbody>
                    <tr>
                        <td class="logo">
                            <svg class="sip-preset-logo sip-preset-common-logo" height="48" viewBox="0 0 24 24"
                                 width="48"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path d="M-74 29h48v48h-48V29z" fill="none"/>
                                <path d="M22 9V7h-2V5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-2h2v-2h-2v-2h2v-2h-2V9h2zm-4 10H4V5h14v14zM6 13h5v4H6zm6-6h4v3h-4zM6 7h5v5H6zm6 4h4v6h-4z"/>
                                <path d="M0 0h24v24H0zm0 0h24v24H0z" fill="none"/>
                            </svg>
                        </td>
                        <td>
                        </td>
                        <td>
                            <input id="createCommonPeerPreset" type="button" value="{{ site._('Create')|e('html') }}"
                                   class="peer-preset-btn"
                                   onclick="openPeerModal(-1, 'createCommonPeerPreset')">
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>
            <br>
            <div class="preset-block"><h2>{{ site._("Skype for Business")|e('html') }}</h2>
                <table class="clean-table">
                    <tbody>
                    <tr>
                        <td class="logo"><img src="/public/images/skype.png" alt="Skype logo" class="sip-preset-logo">
                        </td>
                        <td class="desc">
                        </td>
                        <td><input id="createSkypePeerPreset" type="button" value="{{ site._('Create')|e('html') }}"
                                   class="peer-preset-btn"
                                   onclick="openPeerModal(-1, 'createSkypePeerPreset')"></td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <style>

        select:disabled {
            background-color: #f1f1f1;
        }

        .error {
            background: #E56B4D;
            color: white;
            padding-left: 4px;
            display: block;
            text-overflow: ellipsis;
        }

        input.error {
            border: 1px solid #E56B4D;
            background: none;
            color: #555555;
        }

        .peer-preset-btn {
            color: #0088cc;
            border: 2px solid #0088cc;
            padding: 8px;
            margin-bottom: 10px;
            background: none;
            width: 220px;
            cursor: pointer;
            font-weight: bold;
            outline: none;
            display: block;
        }

        .preset-block {
            border: 1px solid #999999;
            padding: 5px 5px 5px 13px;
        }

        .peer-value-param {
            border: 1px solid gray;
            height: 25px;
            padding-left: 4px;
            box-sizing: border-box;
            width: 100%;
        }

        select.peer-value-param {
            width: 100%;
        }

        .sip-value-param {
            width: 100%;
            box-sizing: border-box;
        }

        .sip-preset-logo {
            width: 90px;
            height: 90px;
        }

        .sip-preset-icon {
            width: 20px;
            height: 20px;
        }

        .sip-preset-common-logo {
            stroke: white;
            stroke-width: 0.5px;
            fill: #4279bc;
        }

        .sip-from-host-radio, .sipRemoveFromDomain, .default_call_destination-radio {
            margin: 0 3px 6px 0;
            position: relative;
            top: 2px;
        }

        .status {
            padding-left: 10px;
        }

        .status > span {
            float: right;
        }

        label.enabled-codecs {
            display: block;
            cursor: pointer;
            margin: 0 -2px 0 -2px;
        }

        label.peer-enabled-codecs {
            cursor: pointer;
        }

        #sipPeerRegistration, #sipPeerTransport {
            padding-bottom: 10px;
        }

        .peer-enabled-codecs {
            display: block;
            margin-top: -6px;
            margin-bottom: -6px;
            padding-top: 5px;
        }

        .cb-label {
            cursor: pointer;
        }

        .enabled-codecs-block {
            display: table;
        }

        .peer-enabled-codecs > div, .enabled-codecs > div {
            display: inline;
            padding-left: 5px;
            position: relative;
            bottom: 2px;
        }

        .peer-param {
            width: 50%;
            padding-top: 0;
            padding-bottom: 0;
            vertical-align: top;
        }

        .clean-table td, .network-tb td {
            border: none;
        }

        .table-body {
            border: none !important;
        }

        .for-sfb {
            display: block;
        }

        .global-settings-block {
            padding: 0 5px 0 10px;
            margin-bottom: 12px;
        }

        .global-settings-block_input-text {
            width: 295px;
        }

        .global-settings-block > label > label.error {
            width: 291px;
        }

        .global-settings-block__description {
            color: grey;
            font-size: 12px;
        }

        .global-settings-block-checkboxes {
            padding: 5px 5px 5px 10px;
        }

        .peer-item > .long_fields {
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        .peer-codecs-section {
            margin: 5px 0;
        }

        #max_session_refresh_interval {
            display: block;
            width: 230px;
            border: 1px solid grey;
        }

        #reducingTheSizeBlock {
            clear: left;
        }

        #additionalOptionsBlock {
            clear: right;
        }

        #availableCodecs {
            clear: left;
            padding-bottom: 10px;
        }

        #availableCodecs > div {
            display: inline-table;
            padding: 0 5px 0 5px;
            margin-right: 10px;
        }

        .ui-dialog-buttonset {
            width: 100%;
        }

        .peerButtonSet#saveBtn {
            float: right;
        }

        .peerButtonSet#cancelBtn {
            float: right;
        }

        #peerAvailableCodecs > div {
            display: inline-table;
            padding: 0 5px 0 5px;
            margin-right: 30px;
        }

        #peerAvailableCodecs {
            clear: left;
            margin-bottom: 10px;
        }

        #peerModal {
            padding-right: 0;
        }

        #peerModalForm td.with-errors {
            height: 67px;
            padding: 0 8px;
            vertical-align: top;
        }

        #peerModalBody {
            max-height: 580px;
        }

        #defaultStatus {
            display: inline;
            padding-left: 5px;
        }

        #maxSessionRefreshInterval {
            width: 225px !important;
        }

        #maxSessionRefreshInterval-error {
            width: 226px !important;
        }

        #peerEnabledCodecs {
            padding-top: 0;
            padding-bottom: 0;
        }

        #roleSpan {
            padding-top: 0;
            padding-bottom: 5px;
        }

        #sip-domain-btn {
            clear: both;
            float: left;
        }

        .number-input {
          width: 70px !important;
        }

        #max_session_refresh_interval-error {
          margin-left: 10px;
          width: 85px;
        }

        #refresh-interval-error-wrapper {
          display: flex;
        }

        #sip_from_host-input-disabled {
          display: none;
          background: rgba(0,0,0,.16);
        }
    </style>

{% endblock %}

{% block js %}
    {#<script src="/public/js/api/localization.js?version={{ current_version }}"></script>#}
    <script src="/public/js/jquery.validate.min.js?version={{ current_version }}"></script>
    {% if lang != 'en' %}
        <script type="text/javascript" language="javascript"
                src="/public/js/jquery.validate_localization/messages_{{ lang }}.js?version={{ current_version }}"></script>
    {% endif %}

    {#JS для блока Network settings#}
    {{ parent('js') }}


    {#JS для блоков: Global SIP settings и SIP connection list#}
    <script type="text/javascript" language="javascript"
            src="/public/js/network/peerSettings.js?version={{ current_version }}"></script>
    <script type="text/javascript">

      /**
       * Global variables
       * */

      var PROTOCOL_NAME = "{{ protocol_name|e('js') }}";
      var GLOBAL_SETTINGS_CONTROLLER = "{{ sip_controller|e('js') }}";
      var PEERS_CONTROLLER = GLOBAL_SETTINGS_CONTROLLER + 'peers/';
      var PEERS_STATUSES_RELOAD_TIMEOUT = {{ peers_statuses_reload_timeout|e('js') }}; //ms
      var DISPlAY_MESSAGE_DURATION = {{ display_message_duration|e('js') }}; //ms
      var DEFAULT_SIP_PROXY_ROLE = "{{ default_sip_proxy_role|e('js') }}";
      var DEFAULT_VOIP_SERVER_ROLE = "{{ default_voip_server_role|e('js') }}";

      /**
       * Messages
       * */

      MESSAGE_PEER_NAME_IS_NOT_UNIQUE = MESSAGE_PEER_NAME_IS_NOT_UNIQUE.replace('%protocol', PROTOCOL_NAME);
      MESSAGE_PEER_HOST_IS_NOT_UNIQUE = MESSAGE_PEER_HOST_IS_NOT_UNIQUE.replace('%protocol', PROTOCOL_NAME);
      MESSAGE_ON_PEER_CREATED = MESSAGE_ON_PEER_CREATED.replace('%protocol', PROTOCOL_NAME);
      MESSAGE_ON_PEER_DELETED = MESSAGE_ON_PEER_DELETED.replace('%protocol', PROTOCOL_NAME);
      MESSAGE_PEER_WAS_ALREADY_DELETED = MESSAGE_PEER_WAS_ALREADY_DELETED.replace('%protocol', PROTOCOL_NAME);
      TEXT_EDIT_PEER_TITLE = TEXT_EDIT_PEER_TITLE.replace('%protocol', PROTOCOL_NAME);
      TEXT_CREATE_PEER_TITLE = TEXT_CREATE_PEER_TITLE.replace('%protocol', PROTOCOL_NAME);

      /**
       * Максимальное время ожидания (количество попыток опроса) статуса конфигурации SIP-соединения
       */
      var MAX_PEER_UNKNOWN_STATUS_REQUEST_COUNT = {{ max_peer_unknown_status_request_count|e('js') }};

      var sipPeerValidateRules = {
        rules: {
          name: {
            required: true,
            minlength: {{ constant(namespace ~ '::LENGTH_NAME_MIN')|e('js') }},
            maxlength: {{ constant(namespace ~ '::LENGTH_NAME_MAX')|e('js') }}
          },
          hostname: {
            required: true,
            minlength: {{ constant(namespace ~ '::LENGTH_HOSTNAME_MIN')|e('js') }},
            maxlength: {{ constant(namespace ~ '::LENGTH_HOSTNAME_MAX')|e('js') }},
              pattern: {{ constant(namespace ~ '::REGEXP_HOSTNAME') }}
          },
            port: {
                required: true,
                digits: true,
                min: {{ constant(namespace ~ '::MIN_VALUE_PORT')|e('js') }},
                max: {{ constant(namespace ~ '::MAX_VALUE_PORT')|e('js') }}
            },
            outboundProxy: {
                required: false,
                pattern: {{ sip_outbound_proxy_regexp }}
            },
            login: {
                required: false,
                minlength: {{ constant(namespace ~ '::LENGTH_LOGIN_MIN')|e('js') }},
                maxlength: {{ constant(namespace ~ '::LENGTH_LOGIN_MAX')|e('js') }},
                pattern: {{ constant(namespace ~ '::REGEXP_LOGIN') }}

            },
            password: {
                required: false,
                minlength: {{ constant(namespace ~ '::LENGTH_PASSWORD_MIN')|e('js') }},
            maxlength: {{ constant(namespace ~ '::LENGTH_PASSWORD_MAX')|e('js') }}
          },
          authorizationName: {
            required: false,
            minlength: {{ constant(namespace ~ '::LENGTH_AUTHORIZATION_NAME_MIN')|e('js') }},
            maxlength: {{ constant(namespace ~ '::LENGTH_AUTHORIZATION_NAME_MAX')|e('js') }},
            pattern: {{ constant(namespace ~ '::REGEXP_AUTHORIZATION_NAME') }}
          },
          registerStrategy: {
            required: true,
            oneOf: [
              "{{ constant(namespace ~ '::ENUM_REGISTER_STRATEGY_OFF')|e('js') }}",
              "{{ constant(namespace ~ '::ENUM_REGISTER_STRATEGY_PERMANENT')|e('js') }}",
              "{{ constant(namespace ~ '::ENUM_REGISTER_STRATEGY_BEFORE_CALL')|e('js') }}"
            ]
          },
          protocol: {
            required: false,
            oneOf: [
              "{{ constant(namespace ~ '::ENUM_PROTOCOL_AUTO')|e('js') }}",
              "{{ constant(namespace ~ '::ENUM_PROTOCOL_TCP')|e('js') }}",
              "{{ constant(namespace ~ '::ENUM_PROTOCOL_UDP')|e('js') }}",
              "{{ constant(namespace ~ '::ENUM_PROTOCOL_TLS')|e('js') }}"
            ]
          },
          telephonePrefixReplace: {
            required: false,
            minlength: {{ constant(namespace ~ '::LENGTH_TELEPHONE_PREFIX_REPLACE_MIN')|e('js') }},
            maxlength: {{ constant(namespace ~ '::LENGTH_TELEPHONE_PREFIX_REPLACE_MAX')|e('js') }},
            pattern: {{ constant(namespace ~ '::REGEXP_TELEPHONE_PREFIX_REPLACE') }}
          },
        maxSessionRefreshInterval: {
            required: {
              depends: function() {
                  return $('#sessionTimersEnabled').is(':checked');
              }
            },
            isSessionIntervalInRange: true
        },
        externalAddress: {
          required: false,
          pattern: {{ hostname_regexp }}
        },
        sipFromHost: {
          required: {
            depends: function() {
              return $('#sipFromHostCustom').is(':checked');
            }
          },
          pattern: {{ hostname_regexp }}
        },
        sipRemoveFromDomain: {
          required: false,
        },
        },
        messages: {
          port: {
            min: "[ " + {{ constant(namespace ~ '::MIN_VALUE_PORT')|e('js') }} +" - " + {{ constant(namespace ~ '::MAX_VALUE_PORT')|e('js') }} +" ]",
            max: "[ " + {{ constant(namespace ~ '::MIN_VALUE_PORT')|e('js') }} +" - " + {{ constant(namespace ~ '::MAX_VALUE_PORT')|e('js') }} +" ]"
          }
        }
      };

      var globalParamsValidateRules = {
        rules: {
          domain: {
            required: {
                depends: function() {
                    return $('#sip_from_host_custom').is(':checked');
                }
            },
            minlength: {{ constant(global_namespace ~ '::LENGTH_SIP_FROM_HOST_MIN')|e('js') }},
            maxlength: {{ constant(global_namespace ~ '::LENGTH_SIP_FROM_HOST_MAX')|e('js') }},
            pattern: {{ constant(global_namespace ~ '::REGEXP_SIP_FROM_HOST') }}
          },
          default_call_destination_sip: {
            required: {
                depends: function() {
                    return $('#default_call_destination_str').is(':checked');
                }
            },
            minlength: {{ constant(global_namespace ~ '::LENGTH_DEFAULT_CALL_DESTINATION_SIP_MIN')|e('js') }},
            maxlength: {{ constant(global_namespace ~ '::LENGTH_DEFAULT_CALL_DESTINATION_SIP_MAX')|e('js') }},
            pattern: {{ constant(global_namespace ~ '::REGEXP_DEFAULT_CALL_DESTINATION_SIP') }}
          },
          external_address_input: {
            required: false,
            pattern: {{ hostname_regexp }}
          },
          outbound_proxy_sip: {
            required: false,
            pattern: {{ sip_outbound_proxy_regexp }}
          }
        }
      };

      var additionalParamsValidateRules = {
          rules: {
              max_session_refresh_interval: {
                  required: true,
                  isSessionIntervalInRange: true
              }
          },
          messages: {
              max_session_refresh_interval: {
                  required: MESSAGE_MAX_SESSION_INTERVAL_RANGE,
                  number: MESSAGE_MAX_SESSION_INTERVAL_RANGE,
                  max: MESSAGE_MAX_SESSION_INTERVAL_RANGE,
                  min: MESSAGE_MAX_SESSION_INTERVAL_RANGE
              }
          }
      };

      var sipParams = {
          'enable-bfcp-checkbox': 'bfcpEnabled',
          'enable-h224-checkbox': 'h224Enabled',
          'enable-ice-checkbox': 'iceEnabled',
          'enable-srtp-checkbox': 'srtpEnabled',
          'NoRtpmap-checkbox': 'noRtpmapForAudioStaticPayload',
          'CompactHeader-checkbox': 'compactHeader',
          'sip_from_host-input': 'sipFromHost',
          'allow_enter_cid-checkbox': 'allowEnterCID',
          'default_call_destination-radio': 'defaultCallDestinationMode',
          'default_call_destination-input': 'defaultCallDestinationSip',
          'outbound_proxy-input': 'outboundProxy',
          'enable-timers-support-checkbox': 'sessionTimersEnabled',
          'max_session_refresh_interval': 'maxSessionRefreshInterval',
          'external_address_input': 'externalAddress',
          'sip-from-host-radio': 'sipRemoveFromDomain',
      };

      var reservedPeers = {
          defaultSipProxy: {
              id: "#default",
              name: "{{ constant(namespace ~ '::DEFAULT_SIP_PROXY_NAME')|e('js') }}",
          role: DEFAULT_SIP_PROXY_ROLE
        },
        defaultVoIPServer: {
          id: "#tel",
          name: "{{ constant(namespace ~ '::DEFAULT_VOIP_SERVER_NAME')|e('js') }}",
          role: DEFAULT_VOIP_SERVER_ROLE
        }
      };

      /**
       * Global functions
       * */
      function globalSettingsRender() {

          /**
         * Рендер элементов формы с атрибутом value
         * */
        $('.sip-value-param').val(function () {
          return globalSettings[sipParams[this.id]];
        });

        /**
         * Рендер чекбоксов формы
         * */
        $('.sip-checkbox-param').prop('checked', function () {
          return globalSettings[sipParams[this.id]] === 1;
        });

        $('#max_session_refresh_interval').prop('disabled', !globalSettings[sipParams['enable-timers-support-checkbox']]);

        if (globalSettings['sipRemoveFromDomain'] === 0) {
            if (globalSettings['sipFromHost'] === '') {
                $('#sip_from_host_server_name').attr('checked', true)
                $('#sip_from_host-input').attr('disabled', true)
                $('#sip_from_host-input').css('background', 'rgba(0,0,0,.16)')
            } else {
                $('#sip_from_host_custom').attr('checked', true)
            }
        } else {
            $('#sip_from_host_disable').attr('checked', true)
            $('#sip_from_host-input').attr('disabled', true)
            $('#sip_from_host-input').css('background', 'rgba(0,0,0,.16)')
        }

        if (globalSettings['defaultCallDestinationMode'] === 1) {
          $('#default_call_destination_allow_enter_cid').attr('checked', true);
          $('#default_call_destination-input').prop('disabled', true).css('background', 'rgba(0,0,0,.16)');
        } else {
          if (globalSettings['defaultCallDestinationSip'] != '') {
            $('#default_call_destination_str').attr('checked', true);
            $('#default_call_destination-input').prop('disabled', false).css('background', 'initial');
          } else {
            $('#default_call_destination_reject').attr('checked', true);
            $('#default_call_destination-input').prop('disabled', true).css('background', 'rgba(0,0,0,.16)');
          }
        }
      }

      function disableSipSaveBtn() {
        var sipSavebtn = $('#sip-domain-btn');

        if (sipSavebtn.prop('disabled') === true) {
          return;
        }

        sipSavebtn.prop('disabled', true);
        sipSavebtn.addClass('button-lock');
      }

      function enableSipSaveBtn() {
        var sipSavebtn = $('#sip-domain-btn');

        if (sipSavebtn.prop('disabled') === false) {
          return;
        }

        sipSavebtn.prop('disabled', false);
        sipSavebtn.removeClass('button-lock');
      }

      function peerModalFormRender() {

        /**
         * Рендер элементов формы с атрибутом value
         * */
        $('.peer-value-param').val(function () {
          return peer[this.id];
        });

        $('#maxSessionRefreshInterval').prop('disabled', !peer["sessionTimersEnabled"]);

        /**
         * Рендер чекбоксов формы
         * */
        $('.peer-checkbox-param').prop('checked', function () {
          return peer[this.id] === 1;
        });

          if (peer.sipRemoveFromDomain === 0) {
              if (peer.sipFromHost === '') {
                  $("[name=sipFromHostRadio]").val(["serverName"]);
                  $('#sipFromHost').attr('disabled', true)
                  $('#sipFromHost').css('background', 'rgba(0,0,0,.16)')
              } else {
                  $("[name=sipFromHostRadio]").val(["custom"]);
              }
          } else {
              $("[name=sipFromHostRadio]").val(["disable"]);
              $('#sipFromHost').attr('disabled', true)
              $('#sipFromHost').css('background', 'rgba(0,0,0,.16)')
          }

        peerEnabledCodecsRender();
        peerConnectionRoleRender();
        currentPeerStatusReset();
      }

      function peerListRender() {
        var tbody = $('#peerList.table-body>tbody');

        if (peers.length === 0) {
          emptyTableMess = "<tr><td><span>" + "{{ site._("%protocol connections list is empty.")|replace({'%protocol': protocol_name})|e('html')|e('js') }}" + "</span></td></tr>";
          tbody.html(emptyTableMess);
          return;
        }

        parseDefaultVoIPServerId();
        var emptyTableRow = '<tr><td colspan="4"></td></tr>';
        tbody.html("");

        var commonIcon = '<svg class="sip-preset-icon sip-preset-common-logo" height="48" viewBox="0 0 24 24" width="48" xmlns="http://www.w3.org/2000/svg">' +
          '<path d="M-74 29h48v48h-48V29z" fill="none"/>' +
          '<path d="M22 9V7h-2V5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-2h2v-2h-2v-2h2v-2h-2V9h2zm-4 10H4V5h14v14zM6 13h5v4H6zm6-6h4v3h-4zM6 7h5v5H6zm6 4h4v6h-4z"/>' +
          '<path d="M0 0h24v24H0zm0 0h24v24H0z" fill="none"/>' +
          '</svg>';
        var SkypeIcon = '<img src="/public/images/skype.png" alt="Skype logo" class="sip-preset-icon">';

        peers.forEach(function (one_peer, counter) {
          var icon = one_peer.marker === {{ constant(namespace ~ '::ENUM_MARKER_SKYPE_FOR_BUSINESS')|e('js') }} ? SkypeIcon : commonIcon;

          var conectionRoleNames = [];
          one_peer.connectionRole = {};

          for (var reservedPeer in reservedPeers) {
            if (one_peer.id === globalSettings[reservedPeer + 'Id']) {
              one_peer.connectionRole[reservedPeer] = true;
              conectionRoleNames.push(reservedPeers[reservedPeer].role);
            } else {
              one_peer.connectionRole[reservedPeer] = false;
            }
          }

          //Вывод всех ролей через запятую
          var role = conectionRoleNames.join(", <br>");

          one_peer.name = isReservedPeer(one_peer.id) ? _(one_peer.name) : one_peer.name;

          var nameField = '<td class="long_fields peer-name" width="40%"><span>' +
            icon + ' <a href="javascript:void(0)" title="' +
            one_peer.name + '" style="vertical-align: top" onclick="setTimeout(function(){openPeerModal(' + counter + ', \'save\')},0)">' +
            one_peer.name +
            '</a></span></td>';

          var roleField = '<td class="peer-role" width="20%"><span class="role" title="' + role + '">' + role + '</span></td>';

          var host = [one_peer.hostname, one_peer.port].filter(function (el) {
            return Boolean(el)
          }).join(':');

          var hostField = '<td class="long_fields peer-host" width="20%"><span title="' + host + '">' + host + '</span></td>';

          var statusField = '<td class="long_fields peer-status" width="20%"><span class="status" style="float:right">' +
            (one_peer.registerStrategy === 0 ? registrationOffMessage : defaultStatus)
            + '</span></td>';

          var row = '<tr class="peer-item" id="peer' + counter + '">' + nameField + roleField + hostField + statusField + '</tr>';
          tbody.append(row);
          mapId[one_peer.id] = counter;

          /**
           * Сброс счетчика получения статуса 0
           */
          one_peer.unknown_status_request_count = 0;
        });
        resize_table();
      }

      function openPeerModal(index, event) {
        dialogTitle = "";
        peer = {};
        var dialogBtns = [
          {
            text: "{{ site._("Cancel")|e('html') }}",
            id: "cancelBtn",
            class: "peerButtonSet",
            click: function () {
              peerModalWindow.dialog('close');
            }
          }
        ];

        /**
         * Настройка отображения формы для изменения настроек Sip-пира
         * */
        if (event === 'save') {
          dialogBtns.unshift({
            text: "{{ site._("Delete")|e('html') }}",
            id: "deletePeerConfig",
            class: "peerButtonSet",
            click: function () {
              dialogQuestionWindow.dialog({
                resizable: false,
                width: 'auto',
                modal: true
              });
            }
          });
          dialogBtns.push(
            {
              text: TEXT_SAVE,
              id: "saveBtn",
              class: "peerButtonSet",
              click: savePeerPreset
            }
          );
          peer = peers[index];
          dialogTitle = TEXT_EDIT_PEER_TITLE;
          /**
           * @var bool
           * */
          var isSkypePeer = peer.marker === {{ constant(namespace ~ '::ENUM_MARKER_SKYPE_FOR_BUSINESS')|e('js') }};
          /**
           * Настройка отображения полей для зарезервированных SIP-пиров и пиров с маркером Skype for business
           * */
          $('#peerModalForm .not-default-prop').css('display', peer.id === reservedPeers.defaultSipProxy.id ? 'none' : 'table-cell');
          $('#peerModalForm #name').attr('disabled', isReservedPeer((peer.id)));
          $('#peerModalForm .not-skype-prop').attr('disabled', isSkypePeer);
        }
        /**
         * Настройка отображения формы для создания Sip-пира
         * */
        else {
          closeChangePresetDialog();
          $('#peerModalForm #name').attr('disabled', false);
          dialogTitle = TEXT_CREATE_PEER_TITLE;
          dialogBtns.push(
            {
              text: TEXT_CREATE,
              id: "saveBtn",
              class: "peerButtonSet",
              click: createPeerPreset
            }
          );

          if (event === 'createSkypePeerPreset') {
            peer.enabledCodecs = $('.enabled-codecs>input').filter(function (key, codec) {
              return codec.id !== 'H265';
            }).map(function (key, codec) {
              return codec.id;
            }).get().join(' ');
            peer.port = {{ constant(namespace ~ '::DEFAULT_SFB_PORT')|e('js') }};
            peer.protocol = "{{ constant(namespace ~ '::SFB_PROTOCOL')|e('js') }}";
            peer.registerStrategy = {{ constant(namespace ~ '::SFB_REGISTER_STRATEGY')|e('js') }};
            peer.iceEnabled = {{ constant(namespace ~ '::SFB_ICE_ENABLED')|e('js') }};
            peer.srtpEnabled = {{ constant(namespace ~ '::SFB_SRTP_ENABLED')|e('js') }};
            peer.bfcpEnabled = {{ constant(namespace ~ '::SFB_BFCP_ENABLED')|e('js') }};
            peer.compactHeader = {{ constant(namespace ~ '::DEFAULT_COMPACT_HEADER')|e('js') }};
            peer.noRtpmapForAudioStaticPayload = {{ constant(namespace ~ '::DEFAULT_NO_RTPMAP_FOR_AUDIO_STATIC_PAYLOAD')|e('js') }};
            peer.noRtpmapForVideoStaticPayload = {{ constant(namespace ~ '::DEFAULT_NO_RTPMAP_FOR_VIDEO_STATIC_PAYLOAD')|e('js') }};
            peer.h224Enabled = {{ constant(namespace ~ '::SFB_H224_ENABLED')|e('js') }};
            peer.marker = {{ constant(namespace ~ '::ENUM_MARKER_SKYPE_FOR_BUSINESS')|e('js') }};
            peer.sessionTimersEnabled = {{ constant(namespace ~ '::DEFAULT_SESSION_TIMERS_ENABLED')|e('js') }};
            peer.maxSessionRefreshInterval = {{ constant(namespace ~ '::DEFAULT_PARAM_MAX_SESSION_REFRESH_INTERVAL')|e('js') }};
            peer.sipRemoveFromDomain = 0;
            peer.sipFromHost = "";

            $('#peerModalForm .not-skype-prop').attr('disabled', true);
          }
          /*
           createCommonPeerPreset
           */
          else {
            peer.enabledCodecs = $('.enabled-codecs>input').filter(function (key, codec) {
              return codec.id !== 'H265';
            }).map(function (key, codec) {
              return codec.id;
            }).get().join(' ');
            peer.port = {{ constant(namespace ~ '::DEFAULT_PORT')|e('js') }};
            peer.protocol = "{{ constant(namespace ~ '::ENUM_PROTOCOL_AUTO')|e('js') }}";
            peer.registerStrategy = {{ constant(namespace ~ '::DEFAULT_REGISTER_STRATEGY')|e('js') }};
            peer.iceEnabled = {{ constant(namespace ~ '::DEFAULT_ICE_ENABLED')|e('js') }};
            peer.srtpEnabled = {{ constant(namespace ~ '::DEFAULT_SRTP_ENABLED')|e('js') }};
            peer.bfcpEnabled = {{ constant(namespace ~ '::DEFAULT_BFCP_ENABLED')|e('js') }};
            peer.compactHeader = {{ constant(namespace ~ '::DEFAULT_COMPACT_HEADER')|e('js') }};
            peer.noRtpmapForAudioStaticPayload = {{ constant(namespace ~ '::DEFAULT_NO_RTPMAP_FOR_AUDIO_STATIC_PAYLOAD')|e('js') }};
            peer.noRtpmapForVideoStaticPayload = {{ constant(namespace ~ '::DEFAULT_NO_RTPMAP_FOR_VIDEO_STATIC_PAYLOAD')|e('js') }};
            peer.h224Enabled = {{ constant(namespace ~ '::DEFAULT_H224_ENABLED')|e('js') }};
            peer.marker = {{ constant(namespace ~ '::ENUM_MARKER_COMMON')|e('js') }};
            peer.sessionTimersEnabled = {{ constant(namespace ~ '::DEFAULT_SESSION_TIMERS_ENABLED')|e('js') }};
            peer.maxSessionRefreshInterval = {{ constant(namespace ~ '::DEFAULT_PARAM_MAX_SESSION_REFRESH_INTERVAL')|e('js') }};
            peer.sipRemoveFromDomain = 0;
            peer.sipFromHost = "";

            $('#sipFromHostServerName').attr('checked', true)
            $('#sipFromHost').attr('disabled', true)
            $('#sipFromHost').css('background', 'rgba(0,0,0,.16)')

            $('#peerModalForm .not-skype-prop').attr('disabled', false);
          }

          peer.sessionTimersEnabled = {{ constant(global_namespace ~ '::DEFAULT_SESSION_TIMERS_ENABLED')|e('js') }};

          outputPeer = {};

          for (var prop in peer) {
            outputPeer[prop] = peer[prop];
          }

          peer.connectionRole = {};

          for (var reservedPeer in reservedPeers) {
            peer.connectionRole[reservedPeer] = false;
          }

        }

        peerModalWindow.dialog({
          resizable: false,
          width: '600px',
          modal: true,
          title: dialogTitle,
          close: function () {
            outputPeer = {};
          },
          buttons: dialogBtns
        });

        disableSaveBtn();
        peerModalFormRender();
        /**
         *  Очистка peer после рендера для отправки всех полей формы.
         *  Для события 'save' отправляются только измненные поля формы.
         */
        if (event !== 'save') {
          resetNewPeerParams(peer);
        }

        $('p.error, label.error').remove();
        $('.peer-value-param').removeClass('error');
      }

      function resize_table() {
        var fieldset_width = $('#sip-connections').width();
        $('.peer-item > .peer-name').css('max-width', fieldset_width * 0.4);
        $('.peer-item > .peer-role').css('max-width', fieldset_width * 0.2);
        $('.peer-item > .peer-host').css('max-width', fieldset_width * 0.2);
      }

      /**
       * Handlers
       * */

      $().ready(function () {
        peerModalWindow = $('#peerModal');
        dialogQuestionWindow = $('#questionDialog');
        var peerModalBodyElem = $('#peerModalBody');
        $(window).resize(function () {
          peerModalBodyElem.css('max-height', window.innerHeight * 0.6);
          peerModalWindow.parent().css('top', '10%');
        });

        $(document).bind('AfterStart', function () {
          Server.setServerMessage("{{ site._('The settings are saved')|escape('js') }}", Server.MESSAGE_TYPE.NOTE, DISPlAY_MESSAGE_DURATION);
        });

        $.validator.addMethod(
          "pattern",
          function (value, element, regexp) {
            return regexp.test(value);
          },
          MESSAGE_PLEASE_ENTER_VALID_VALUE
        );

        $.validator.addMethod(
          "oneOf",
          function (value, element, allowedValues) {
            return allowedValues.indexOf(value) > -1;
          },
          MESSAGE_CHANGE_ENTER_ALLOWED_VALUE
        );

          $.validator.addMethod("isSessionIntervalInRange", function(value, element) {
              return this.optional(element) || (value >= 90 && value <= 86400);
          }, "[ 90 - 86400 ]");


          $(window).resize(resize_table);
      });

      $('.global-settings').ready(function () {
        $('#globalForm').validate(globalParamsValidateRules);

        function rewriteOutputSIP(element) {

          if (element === undefined) {
            return;
          }

          var validator = $('#globalForm').validate(globalParamsValidateRules);

          $('#additionalOptionsForm').validate(additionalParamsValidateRules);

          if (validator.numberOfInvalids() !== 0
                  || !$("#default_call_destination-input").valid() || !$("#max_session_refresh_interval").valid()
                  || !$("#external_address_input").valid() || !$('#sip_from_host-input').valid()) {
            $('.error').prop('title', function () {
              return this.innerText
            });
            disableSipSaveBtn();
            return;
          }

          var paramName = sipParams[element.id];

          if (element.value === globalSettings[paramName]) {

            if (outputGlobalSettings[paramName] !== undefined) {
              delete outputGlobalSettings[paramName];
            }

            if (JSON.stringify(outputGlobalSettings) === "{}") {
              disableSipSaveBtn();
            }

            return;
          }

          outputGlobalSettings[paramName] = element.value;

          enableSipSaveBtn();
        }

        var sipValueParamElems = $('.sip-value-param');

        sipValueParamElems.change(function () {
          rewriteOutputSIP(this);
        });
        sipValueParamElems.keyup(function () {
          rewriteOutputSIP(this)
        });

        $('.sip-from-host-radio').change(function () {
            $('#sip_from_host-input').attr('disabled', this.value !== 'custom');
            $('#sip_from_host-input').css('background', this.value !== 'custom' ? 'rgba(0,0,0,.16)' : 'initial');

            $('#sip_from_host-input').prop('value', '')
            delete outputGlobalSettings['sipFromHost']
            delete outputGlobalSettings['sipRemoveFromDomain']

            if (globalSettings['sipRemoveFromDomain'] !== +(this.value === 'disable')) {
                outputGlobalSettings['sipRemoveFromDomain'] = +(this.value === 'disable');
            }

            switch (this.value) {
                case 'disable':
                case 'serverName':
                    $('#sip_from_host-input').valid()
                    if (globalSettings['sipFromHost'] !== '') {
                        outputGlobalSettings['sipFromHost'] = '';
                    }
                    break;
            }

            if (JSON.stringify(outputGlobalSettings) === "{}" || this.value === 'custom') {
                disableSipSaveBtn();
            } else {
                enableSipSaveBtn();
            }
        })

        $('.default_call_destination-radio').change(function () {
            $('#default_call_destination-input').attr('disabled', this.value != 0);
            $('#default_call_destination-input').css('background', this.value != 0 ? 'rgba(0,0,0,.16)' : 'initial');
            if (this.value != 0)
            {
              $('#default_call_destination-input').prop('value', '');
              $('#default_call_destination-input').valid();
            }

            delete outputGlobalSettings['defaultCallDestinationMode'];
            if (globalSettings['defaultCallDestinationMode'] !== this.value)
            {
                if (this.value == 1) {
                  outputGlobalSettings['defaultCallDestinationMode'] = this.value;
                  outputGlobalSettings['defaultCallDestinationSip'] = '';
                } else if (this.value == 2) {
                  outputGlobalSettings['defaultCallDestinationMode'] = 0;
                  outputGlobalSettings['defaultCallDestinationSip'] = '';
                } else {
                  outputGlobalSettings['defaultCallDestinationMode'] = this.value;
                }
            }

            if (JSON.stringify(outputGlobalSettings) === "{}" || this.value == 0) {
                disableSipSaveBtn();
            } else {
                enableSipSaveBtn();
            }
        })


        $('.sip-checkbox-param').change(function () {

          var value = this.checked ? 1 : 0;
          var paramName = sipParams[this.id];

          if (paramName === "sessionTimersEnabled") {
              var maxSessionRefreshIntervalField = $('#max_session_refresh_interval');
              maxSessionRefreshIntervalField.prop('disabled', !this.checked);
              if (this.checked && maxSessionRefreshIntervalField.prop('value') === "") {
                  maxSessionRefreshIntervalField.prop('value', 1800);
                  outputGlobalSettings["maxSessionRefreshInterval"] = 1800;
              }
              else if (this.checked && maxSessionRefreshIntervalField.prop('value') >= 90) {
                  outputGlobalSettings["maxSessionRefreshInterval"] = maxSessionRefreshIntervalField.prop('value');
              }
              else if (!this.checked) {
                  delete outputGlobalSettings["maxSessionRefreshInterval"];
              }
          }

            /**
           * Если значение не изменилось, исключаем его из outputGlobalSettings
           */
          if (value === globalSettings[paramName]) {

            if (outputGlobalSettings[paramName] !== undefined) {
                delete outputGlobalSettings[paramName];
            }

            if (JSON.stringify(outputGlobalSettings) === "{}") {
              disableSipSaveBtn();
            }

            return;
          }

          outputGlobalSettings[paramName] = value;

          enableSipSaveBtn();

        });

        $('.enabled-codecs-checkbox').change(function () {

          var currentEnabledCodecs = enabledCodecsGet();

          /**
           * Если значение не изменилось, исключаем его из outputGlobalSettings
           */
          if (globalSettings.enabledCodecs === currentEnabledCodecs) {

            if (outputGlobalSettings.enabledCodecs !== undefined) {
              delete outputGlobalSettings.enabledCodecs;
            }

            if (JSON.stringify(outputGlobalSettings) === "{}") {
              disableSipSaveBtn();
            }

            return;
          }

          outputGlobalSettings.enabledCodecs = currentEnabledCodecs;

          enableSipSaveBtn();

        });

        $('#sip-domain-btn').click(function () {
          var validator = $('#globalForm').validate(globalParamsValidateRules);

          $('#additionalOptionsForm').validate(additionalParamsValidateRules);

          if (validator.numberOfInvalids() !== 0
                  || !$("#default_call_destination-input").valid() || !$("#max_session_refresh_interval").valid()
                  || !$("#external_address_input").valid() || !$('#sip_from_host-input').valid()) {
              $('.error').prop('title', function () {
                  return this.innerText
              });
              disableSipSaveBtn();
              return;
          }

          if (outputGlobalSettings['noRtpmapForAudioStaticPayload'] !== undefined) {
            outputGlobalSettings['noRtpmapForVideoStaticPayload'] = outputGlobalSettings['noRtpmapForAudioStaticPayload'];
          }
          saveGlobalSettings();
          disableSipSaveBtn();
        });

        $.ajax({
          url: GLOBAL_SETTINGS_CONTROLLER,
          type: 'GET',
          dataType: 'json',
          success: function (data) {
            if (data.SIP === undefined) {
              $(document).trigger('display-header-error', {message: _(t._error)});
              return;
            }

            globalSettings = data.SIP;
            parseDefaultVoIPServerId();
            enabledCodecsRender();
            globalSettingsRender();
            peerListGet();
            setTimeout(peersStatusesRefresh, PEERS_STATUSES_RELOAD_TIMEOUT);
          },
          error: function () {
            $(document).trigger('display-header-error', {message: MESSAGE_REQUEST_ERROR});
          }
        });

      });

      $('#peerModalForm').ready(function () {

        $('#peerModalForm').validate(sipPeerValidateRules);

        /**
         *
         * @param element
         */
        function rewriteOutputPeer(element) {

          if (element === undefined) {
            return;
          }

          var errorElem = $(".unique-error");
          if (errorElem[0] !== undefined) {
            errorElem.remove();
          }

          var value = element.value;

          var peerModalForm = $('#peerModalForm');
          var validator = peerModalForm.validate();

          var JQelem = $('#' + element.id);
          JQelem.valid();

          if (value === peer[element.id]) {

            if (outputPeer[element.id] !== undefined) {
              delete outputPeer[element.id];
            }

            if (JSON.stringify(outputPeer) === "{}") {
              disableSaveBtn();
            }

            return;
          }

          if (JQelem.validate().numberOfInvalids() === 0) {
            outputPeer[element.id] = value;
          }

          if (validator.numberOfInvalids() !== 0 || $('#name').val() === '' || $('#hostname').val() === ''
          || !$('#maxSessionRefreshInterval').valid() || !$('#sipFromHost').valid()) {
            $('.error').prop('title', function () {
              return this.innerText
            });
            disableSaveBtn();
            return;
          }

          enableSaveBtn();

        }

        var peerValueParamElems = $('.peer-value-param');

        peerValueParamElems.change(function () {
          rewriteOutputPeer(this);
        });

        peerValueParamElems.focusout(function () {
          rewriteOutputPeer(this);
        });

        peerValueParamElems.keyup(function () {
          rewriteOutputPeer(this)
        });

        $('.connection-role').change(function () {

          if (outputPeer.connectionRole === undefined) {
            outputPeer.connectionRole = {};
          }

          outputPeer.connectionRole[this.id] = this.checked;

          if (connectionRoleIsNotModifed()) {
            delete outputPeer.connectionRole;

            if (JSON.stringify(outputPeer) === "{}") {
              disableSaveBtn();
            }

            return;
          }

          var peerModalForm = $('#peerModalForm');
          var validator = peerModalForm.validate();

          peerModalForm.valid();

          if (validator.numberOfInvalids() !== 0) {
            disableSaveBtn();
            return;
          }

          enableSaveBtn();
        });

        $('.peer-checkbox-param').change(function () {
            var value = this.checked ? 1 : 0;

            if (this.id === "sessionTimersEnabled") {
                var maxSessionRefreshIntervalField = $('#maxSessionRefreshInterval');
                maxSessionRefreshIntervalField.prop('disabled', !this.checked);
                if (this.checked && maxSessionRefreshIntervalField.prop('value') === "") {
                    maxSessionRefreshIntervalField.prop('value', 1800);
                    outputPeer["maxSessionRefreshInterval"] = 1800;
                }
                else if (this.checked && maxSessionRefreshIntervalField.prop('value') >= 90) {
                    outputPeer["maxSessionRefreshInterval"] = maxSessionRefreshIntervalField.prop('value');
                }
                else if (!this.checked) {
                    delete outputPeer["maxSessionRefreshInterval"];
                }
            }

            if (value === peer[this.id]) {

            if (outputPeer[this.id] !== undefined) {
              delete outputPeer[this.id];
            }

            if (JSON.stringify(outputPeer) === "{}") {
              disableSaveBtn();
            }
            return;
          }

          var peerModalForm = $('#peerModalForm');
          var validator = peerModalForm.validate();

          peerModalForm.valid();

          if (validator.numberOfInvalids() !== 0) {
            disableSaveBtn();
            return;
          }

          outputPeer[this.id] = value;
          enableSaveBtn();

        });

        $('.peer-enabled-codecs-checkbox').change(function () {

          var currentEnabledCodecs = peerEnabledCodecsGet();

          var peerModalForm = $('#peerModalForm');
          var validator = peerModalForm.validate();

          peerModalForm.valid();

          if (validator.numberOfInvalids() !== 0) {
            disableSaveBtn();
            return;
          }

          /**
           * Если значение не изменилось, исключаем его из outputPeer
           */
          if (peer.enabledCodecs === currentEnabledCodecs || peer.enabledCodecs === null && currentEnabledCodecs.length === {{ constant(namespace ~ '::LENGTH_ENABLED_CODECS_MAX')|e('js') }}) {

            if (outputPeer.enabledCodecs !== undefined) {
              delete outputPeer.enabledCodecs;
            }

            if (JSON.stringify(outputPeer) === "{}") {
              disableSaveBtn();
            }

            return;
          }

          outputPeer.enabledCodecs = currentEnabledCodecs;

          enableSaveBtn();

        });

      $('.sipRemoveFromDomain').change(function () {
          var sipFromHost = $('#sipFromHost');

          sipFromHost.attr('disabled', this.value !== 'custom');
          sipFromHost.css('background', this.value !== 'custom' ? 'rgba(0,0,0,.16)' : 'initial');

          sipFromHost.prop('value', '')
          delete outputPeer['sipFromHost']
          delete outputPeer['sipRemoveFromDomain']

          if (peer['sipRemoveFromDomain'] !== +(this.value === 'disable')) {
              outputPeer['sipRemoveFromDomain'] = +(this.value === 'disable');
          }

          switch (this.value) {
              case 'disable':
              case 'serverName':
                  sipFromHost.valid()
                  if (peer['sipFromHost'] !== '') {
                      outputPeer['sipFromHost'] = '';
                  }
                  break;
          }

          if (JSON.stringify(outputPeer) === "{}" || this.value === 'custom') {
              disableSaveBtn();
          } else {
              enableSaveBtn();
          }
      })

      });

    </script>
{% endblock %}
